import React, { useState } from "react";
import axios from "axios";

const defaultInput = {
  trace: { batchId: "", origin: "", grower: "" },
  water: { pH: "", nitrate: "", turbidity: "", source: "" },
  soil: { salinity: "", pH: "", organic: "", moisture: "" },
  fertilizer: { type: "", amount: "" },
  environment: { temperature: "", humidity: "" }
};

export default function AuditDNAEnvAI() {
  const [inputs, setInputs] = useState(defaultInput);
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  function handleInputChange(e, category, field) {
    setInputs({
      ...inputs,
      [category]: {
        ...inputs[category],
        [field]: e.target.value
      }
    });
  }

  async function analyzeAI() {
    setLoading(true);
    setError("");
    setResult(null);
    try {
      const res = await axios.post("http://localhost:8001/api/ai/analyze", inputs);
      setResult(res.data);
    } catch (err) {
      setError(err.message || "API error");
    }
    setLoading(false);
  }

  return (
    <div style={{ maxWidth: 700, margin: "40px auto", padding: 30, border: "1px solid #ccc", borderRadius: 8, background: "#fff" }}>
      <h2 style={{textAlign: "center"}}>AuditDNA Environment AI Analyzer</h2>
      <form onSubmit={e => { e.preventDefault(); analyzeAI(); }}>
        <fieldset style={{ marginBottom: 20, padding:10 }}>
          <legend><b>Trace Data</b></legend>
          <label style={{marginRight:10}}>
            Batch ID:
            <input type="text" value={inputs.trace.batchId} onChange={e => handleInputChange(e, "trace", "batchId")} style={{marginLeft:5}} />
          </label>
          <label style={{marginRight:10}}>
            Origin:
            <input type="text" value={inputs.trace.origin} onChange={e => handleInputChange(e, "trace", "origin")} style={{marginLeft:5}} />
          </label>
          <label>
            Grower:
            <input type="text" value={inputs.trace.grower} onChange={e => handleInputChange(e, "trace", "grower")} style={{marginLeft:5}} />
          </label>
        </fieldset>
        <fieldset style={{ marginBottom: 20, padding:10 }}>
          <legend><b>Water</b></legend>
          <label style={{marginRight:10}}>
            pH:
            <input type="number" step="0.01" value={inputs.water.pH} onChange={e => handleInputChange(e, "water", "pH")} style={{marginLeft:5, width:70}} />
          </label>
          <label style={{marginRight:10}}>
            Nitrate:
            <input type="number" step="0.01" value={inputs.water.nitrate} onChange={e => handleInputChange(e, "water", "nitrate")} style={{marginLeft:5, width:70}} />
          </label>
          <label style={{marginRight:10}}>
            Turbidity:
            <input type="number" step="0.01" value={inputs.water.turbidity} onChange={e => handleInputChange(e, "water", "turbidity")} style={{marginLeft:5, width:70}} />
          </label>
          <label>
            Source:
            <input type="text" value={inputs.water.source} onChange={e => handleInputChange(e, "water", "source")} style={{marginLeft:5}} />
          </label>
        </fieldset>
        <fieldset style={{ marginBottom: 20, padding:10 }}>
          <legend><b>Soil</b></legend>
          <label style={{marginRight:10}}>
            Salinity:
            <input type="number" step="0.01" value={inputs.soil.salinity} onChange={e => handleInputChange(e, "soil", "salinity")} style={{marginLeft:5, width:70}} />
          </label>
          <label style={{marginRight:10}}>
            pH:
            <input type="number" step="0.01" value={inputs.soil.pH} onChange={e => handleInputChange(e, "soil", "pH")} style={{marginLeft:5, width:70}} />
          </label>
          <label style={{marginRight:10}}>
            Organic (%):
            <input type="number" step="0.01" value={inputs.soil.organic} onChange={e => handleInputChange(e, "soil", "organic")} style={{marginLeft:5, width:70}} />
          </label>
          <label>
            Moisture (%):
            <input type="number" step="0.01" value={inputs.soil.moisture} onChange={e => handleInputChange(e, "soil", "moisture")} style={{marginLeft:5, width:70}} />
          </label>
        </fieldset>
        <fieldset style={{ marginBottom: 20, padding:10 }}>
          <legend><b>Fertilizer</b></legend>
          <label style={{marginRight:10}}>
            Type:
            <input type="text" value={inputs.fertilizer.type} onChange={e => handleInputChange(e, "fertilizer", "type")} style={{marginLeft:5}} />
          </label>
          <label>
            Amount:
            <input type="number" step="0.01" value={inputs.fertilizer.amount} onChange={e => handleInputChange(e, "fertilizer", "amount")} style={{marginLeft:5, width:70}} />
          </label>
        </fieldset>
        <fieldset style={{ marginBottom: 20, padding:10 }}>
          <legend><b>Environment</b></legend>
          <label style={{marginRight:10}}>
            Temperature (C):
            <input type="number" step="0.01" value={inputs.environment.temperature} onChange={e => handleInputChange(e, "environment", "temperature")} style={{marginLeft:5, width:70}} />
          </label>
          <label>
            Humidity (%):
            <input type="number" step="0.01" value={inputs.environment.humidity} onChange={e => handleInputChange(e, "environment", "humidity")} style={{marginLeft:5, width:70}} />
          </label>
        </fieldset>
        <button type="submit" disabled={loading} style={{padding:"8px 24px", fontSize:"1.1em"}}>
          {loading ? "Analyzing..." : "Run AI Analysis"}
        </button>
      </form>
      {error && <div style={{ color: "red", marginTop: 20 }}>Error: {error}</div>}
      {result && (
        <div style={{ marginTop: 30, background: "#f9f9f9", padding: 20, borderRadius: 8, border: "1px solid #ddd" }}>
          <h3>Results</h3>
          <div><b>EcoIndex:</b> {result.EcoIndex}</div>
          <div><b>Risk Flags:</b> {result.RiskFlags && result.RiskFlags.length ? result.RiskFlags.join(", ") : "None"}</div>
          <div><b>Recommended Actions:</b>
            <ul>
              {result.RecommendedActions && result.RecommendedActions.map((action, i) => (
                <li key={i}>{action}</li>
              ))}
            </ul>
          </div>
          {result.Explain && (
            <div>
              <b>Explain:</b>
              <ul>
                {result.Explain.map((msg, i) => <li key={i}>{msg}</li>)}
              </ul>
            </div>
          )}
          {result.Summary && <div><b>Summary:</b> {result.Summary}</div>}
          {result.Trace && (
            <div style={{ marginTop: 20 }}>
              <h4>Trace Data:</h4>
              <div><b>Batch ID:</b> {result.Trace.batchId}</div>
              <div><b>Origin:</b> {result.Trace.origin}</div>
              <div><b>Grower:</b> {result.Trace.grower}</div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
